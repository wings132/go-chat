// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: chatmessage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	OnLoginReq(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	OnRegisterReq(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
	OnShowAllUserOnline(ctx context.Context, in *ShowAllUserOnlineReq, opts ...grpc.CallOption) (*ShowAllUserOnlineRes, error)
	OnP2PChatReq(ctx context.Context, in *P2PChatReq, opts ...grpc.CallOption) (ChatService_OnP2PChatReqClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) OnLoginReq(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/chatmessage.chatService/onLoginReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) OnRegisterReq(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	out := new(RegisterRes)
	err := c.cc.Invoke(ctx, "/chatmessage.chatService/onRegisterReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) OnShowAllUserOnline(ctx context.Context, in *ShowAllUserOnlineReq, opts ...grpc.CallOption) (*ShowAllUserOnlineRes, error) {
	out := new(ShowAllUserOnlineRes)
	err := c.cc.Invoke(ctx, "/chatmessage.chatService/onShowAllUserOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) OnP2PChatReq(ctx context.Context, in *P2PChatReq, opts ...grpc.CallOption) (ChatService_OnP2PChatReqClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/chatmessage.chatService/onP2PChatReq", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceOnP2PChatReqClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_OnP2PChatReqClient interface {
	Recv() (*P2PChatRes, error)
	grpc.ClientStream
}

type chatServiceOnP2PChatReqClient struct {
	grpc.ClientStream
}

func (x *chatServiceOnP2PChatReqClient) Recv() (*P2PChatRes, error) {
	m := new(P2PChatRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	OnLoginReq(context.Context, *LoginReq) (*LoginRes, error)
	OnRegisterReq(context.Context, *RegisterReq) (*RegisterRes, error)
	OnShowAllUserOnline(context.Context, *ShowAllUserOnlineReq) (*ShowAllUserOnlineRes, error)
	OnP2PChatReq(*P2PChatReq, ChatService_OnP2PChatReqServer) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) OnLoginReq(context.Context, *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnLoginReq not implemented")
}
func (UnimplementedChatServiceServer) OnRegisterReq(context.Context, *RegisterReq) (*RegisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnRegisterReq not implemented")
}
func (UnimplementedChatServiceServer) OnShowAllUserOnline(context.Context, *ShowAllUserOnlineReq) (*ShowAllUserOnlineRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnShowAllUserOnline not implemented")
}
func (UnimplementedChatServiceServer) OnP2PChatReq(*P2PChatReq, ChatService_OnP2PChatReqServer) error {
	return status.Errorf(codes.Unimplemented, "method OnP2PChatReq not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_OnLoginReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).OnLoginReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatmessage.chatService/onLoginReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).OnLoginReq(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_OnRegisterReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).OnRegisterReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatmessage.chatService/onRegisterReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).OnRegisterReq(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_OnShowAllUserOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAllUserOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).OnShowAllUserOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatmessage.chatService/onShowAllUserOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).OnShowAllUserOnline(ctx, req.(*ShowAllUserOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_OnP2PChatReq_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(P2PChatReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).OnP2PChatReq(m, &chatServiceOnP2PChatReqServer{stream})
}

type ChatService_OnP2PChatReqServer interface {
	Send(*P2PChatRes) error
	grpc.ServerStream
}

type chatServiceOnP2PChatReqServer struct {
	grpc.ServerStream
}

func (x *chatServiceOnP2PChatReqServer) Send(m *P2PChatRes) error {
	return x.ServerStream.SendMsg(m)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatmessage.chatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "onLoginReq",
			Handler:    _ChatService_OnLoginReq_Handler,
		},
		{
			MethodName: "onRegisterReq",
			Handler:    _ChatService_OnRegisterReq_Handler,
		},
		{
			MethodName: "onShowAllUserOnline",
			Handler:    _ChatService_OnShowAllUserOnline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "onP2PChatReq",
			Handler:       _ChatService_OnP2PChatReq_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chatmessage.proto",
}
